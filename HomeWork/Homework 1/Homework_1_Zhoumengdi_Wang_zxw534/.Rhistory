knitr::opts_chunk$set(echo = TRUE)
college = read.csv("College.csv")
fix(college)
rownames(college) = college[,1]
fix(college)
college = college[,-1]
fix(college)
summary(college)
pairs(college[,1:10])
plot(college$Private,college$Outstate)
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college , Elite)
summary(college)
plot(college$Elite, college$Outstate)
attach(college)
par(mfrow=c(2,2))
hist(Apps, breaks=5)
hist(Apps, breaks=15)
hist(Apps, breaks=25)
hist(Apps, breaks=35)
par(mfrow=c(2,2))
hist(Accept, breaks=5)
hist(Accept, breaks=15)
hist(Accept, breaks=25)
hist(Accept, breaks=35)
par(mfrow=c(2,2))
hist(Enroll, breaks=5)
hist(Enroll, breaks=15)
hist(Enroll, breaks=25)
hist(Enroll, breaks=35)
plot(college$Private,college$Books)
plot(college$Elite,college$Terminal)
plot(college$Elite,college$Grad.Rate)
plot(college$Private,college$perc.alumni)
Auto=read.csv("Auto.csv",header=T,na.strings ="?")
pairs(Auto)
cor(Auto[,-9], use="pairwise.complete.obs")
model1 = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin, Auto)
summary(model1)
plot(model1)
model2 = lm(mpg ~ cylinders * displacement * horsepower * weight * acceleration * year * origin, Auto)
anova(model1, model2)
model3 = lm(mpg ~ cylinders : displacement : horsepower : weight * acceleration : year : origin, Auto)
anova(model1, model3)
Auto$displacement.t = log(Auto$displacement)
Auto$horsepower.t = log(Auto$horsepower)
Auto$weight.t = log(Auto$weight)
Auto$year.t = log(Auto$year)
model_log = lm(mpg ~ cylinders * displacement.t * horsepower.t * weight.t * acceleration * year.t * origin, Auto)
plot(model_log)
Auto$cylinders.tt = (Auto$cylinders)^2
Auto$acceleration.tt = (Auto$acceleration)^2
model.2 = lm(mpg ~ cylinders.tt * displacement * horsepower * weight * acceleration.tt * year * origin, Auto)
plot(model.2)
library(MASS)
model.zn = lm(crim ~ zn, Boston)
model.indus = lm(crim ~ indus, Boston)
model.chas = lm(crim ~ chas, Boston)
model.nox = lm(crim ~ nox, Boston)
model.rm = lm(crim ~ rm, Boston)
model.age = lm(crim ~ age, Boston)
model.dis = lm(crim ~ dis, Boston)
model.rad = lm(crim ~ rad, Boston)
model.tax = lm(crim ~ tax, Boston)
model.ptratio = lm(crim ~ ptratio, Boston)
model.black = lm(crim ~ black, Boston)
model.lstat = lm(crim ~ lstat, Boston)
model.medv = lm(crim ~ medv, Boston)
summary(model.zn)
summary(model.indus)
summary(model.chas)
summary(model.nox)
summary(model.rm)
summary(model.age)
summary(model.dis)
summary(model.rad)
summary(model.tax)
summary(model.ptratio)
summary(model.black)
summary(model.lstat)
summary(model.medv)
plot(Boston$zn, Boston$crim)
plot(Boston$indus, Boston$crim)
plot(Boston$chas, Boston$crim)
plot(Boston$nox, Boston$crim)
plot(Boston$rm, Boston$crim)
plot(Boston$age, Boston$crim)
plot(Boston$dis, Boston$crim)
plot(Boston$rad, Boston$crim)
plot(Boston$tax, Boston$crim)
plot(Boston$ptratio, Boston$crim)
plot(Boston$black, Boston$crim)
plot(Boston$lstat, Boston$crim)
plot(Boston$medv, Boston$crim)
model_b = lm(crim ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, Boston)
summary(model_b)
simple.coefficients = c(coefficients(model.zn)[2], coefficients(model.indus)[2],
coefficients(model.chas)[2], coefficients(model.nox)[2],
coefficients(model.rm)[2], coefficients(model.age)[2],
coefficients(model.dis)[2], coefficients(model.rad)[2],
coefficients(model.tax)[2], coefficients(model.ptratio)[2],
coefficients(model.black)[2], coefficients(model.lstat)[2],
coefficients(model.medv)[2])
multiple.coefficients = coefficients(model_b)[2:14]
plot(simple.coefficients, multiple.coefficients)
simple.coefficients
model.zn.nonlinear = lm(crim ~ poly(zn, 3), Boston)
model.indus.nonlinear = lm(crim ~ poly(indus, 3), Boston)
model.chas.nonlinear = lm(crim ~ chas + I(chas^2) + I(chas^3), Boston)
model.nox.nonlinear = lm(crim ~ poly(nox, 3), Boston)
model.rm.nonlinear = lm(crim ~ poly(rm, 3), Boston)
model.age.nonlinear = lm(crim ~ poly(age, 3), Boston)
model.dis.nonlinear = lm(crim ~ poly(dis, 3), Boston)
model.rad.nonlinear = lm(crim ~ poly(rad, 3), Boston)
model.tax.nonlinear = lm(crim ~ poly(tax, 3), Boston)
model.ptratio.nonlinear = lm(crim ~ poly(ptratio, 3), Boston)
model.black.nonlinear = lm(crim ~ poly(black, 3), Boston)
model.lstat.nonlinear = lm(crim ~ poly(lstat, 3), Boston)
model.medv.nonlinear = lm(crim ~ poly(medv, 3), Boston)
anova(model.zn, model.zn.nonlinear)
anova(model.indus, model.indus.nonlinear)
anova(model.chas, model.chas.nonlinear)
anova(model.nox, model.nox.nonlinear)
anova(model.rm, model.rm.nonlinear)
anova(model.age, model.age.nonlinear)
anova(model.dis, model.dis.nonlinear)
anova(model.rad, model.rad.nonlinear)
anova(model.tax, model.tax.nonlinear)
anova(model.ptratio, model.ptratio.nonlinear)
anova(model.black, model.black.nonlinear)
anova(model.lstat, model.lstat.nonlinear)
anova(model.medv, model.medv.nonlinear)
median(Boston$crim)
Boston$crim.higher.median = ifelse(Boston$crim >= median(Boston$crim), 1, 0)
train = 1:(dim(Boston)[1]*.8)
test = (dim(Boston)[1]*.8):dim(Boston)[1]
Boston.train = Boston[train,]
Boston.test = Boston[test,]
log_reg = glm((crim.higher.median == 1) ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, data=Boston.train, family=binomial)
summary(log_reg)
log.reg.probabilities = predict(log_reg, Boston.test, type="response")
log.reg.predictions = ifelse(log.reg.probabilities >= 0.5, 1, 0)
mean(log.reg.predictions != Boston.test$crim.higher.median)
log_reg2 = glm((crim.higher.median == 1) ~ nox + dis + rad + ptratio + medv, data=Boston.train, family=binomial)
summary(log_reg2)
log.reg.probabilities2 = predict(log_reg2, Boston.test, type="response")
log.reg.predictions2 = ifelse(log.reg.probabilities2 >= 0.5, 1, 0)
mean(log.reg.predictions2 != Boston.test$crim.higher.median)
lda1 = lda((crim.higher.median == 1) ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, data=Boston.train)
lda.predictions.text1 = predict(lda1, Boston.test)
lda.predictions1 = ifelse(lda.predictions.text1$class == "TRUE", 1, 0)
mean(lda.predictions1 != Boston.test$crim.higher.median)
lda2 = lda((crim.higher.median == 1) ~ nox + dis + rad + ptratio + medv, data=Boston.train)
lda.predictions.text2 = predict(lda2, Boston.test)
lda.predictions2 = ifelse(lda.predictions.text2$class == "TRUE", 1, 0)
mean(lda.predictions2 != Boston.test$crim.higher.median)
lda.predictions.text2
lda.predictions.text2$class
lda.predictions.text2$posterior
log.reg.probabilities2 = predict(log_reg2, Boston.test)
log.reg.predictions2 = ifelse(log.reg.probabilities2 >= 0.5, 1, 0)
mean(log.reg.predictions2 != Boston.test$crim.higher.median)
names(log.reg.probabilities2)
lda1 = lda((crim.higher.median == 1) ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, data=Boston.train)
lda.predictions.text1 = predict(lda1, Boston.test)
lda.predictions1 = ifelse(lda.predictions.text1$class == "TRUE", 1, 0)
names(lda.predictions.text1)
mean(lda.predictions1 != Boston.test$crim.higher.median)
